@model DynThings.Data.Models.Endpoint
<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
    <h4 class="modal-title" id="myModalLabel">EndPoint Editor</h4>
</div>
<div class="modal-body">
    @using (Html.BeginForm("EditPV", "EndPoints", FormMethod.Post, new { id = "EndPointEditForm" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.ID)


        @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "" })
        @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })


        @Html.LabelFor(model => model.TypeID, "TypeID", htmlAttributes: new { @class = "" })
        @Html.DropDownList("TypeID", null, htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.TypeID, "", new { @class = "text-danger" })

        @Html.LabelFor(model => model.TypeID, "ThingID", htmlAttributes: new { @class = "" })
        @Html.DropDownList("ThingID", null, htmlAttributes: new { @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ThingID, "", new { @class = "text-danger" })
        <br />
        
        @Html.EditorFor(model => model.IsNumericOnly, new { htmlAttributes = new { @class = "" } })
        @Html.LabelFor(model => model.IsNumericOnly, htmlAttributes: new { @class = "" })
        @Html.ValidationMessageFor(model => model.IsNumericOnly, "", new { @class = "text-danger" })
        <br />

        @Html.LabelFor(model => model.MinValue, htmlAttributes: new { @class = "" })
        @Html.EditorFor(model => model.MinValue, new { htmlAttributes = new { @class = "form-control" ,@type = "Number" } })
        @Html.ValidationMessageFor(model => model.MinValue, "", new { @class = "text-danger" })

        @Html.LabelFor(model => model.MaxValue, htmlAttributes: new { @class = "" })
        @Html.EditorFor(model => model.MaxValue, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.MaxValue, "", new { @class = "text-danger" })

        @Html.LabelFor(model => model.LowRange, htmlAttributes: new { @class = "" })
        @Html.EditorFor(model => model.LowRange, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.LowRange, "", new { @class = "text-danger" })

        @Html.LabelFor(model => model.HighRange, htmlAttributes: new { @class = "" })
        @Html.EditorFor(model => model.HighRange, new { htmlAttributes = new { @class = "form-control" } })
        @Html.ValidationMessageFor(model => model.HighRange, "", new { @class = "text-danger" })

        <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <button type="submit" class="btn btn-primary">Save changes</button>
        </div>
    }
</div>
<script>
    $(document).ready(function () {
        AttachEventEndPointEditForm(@Model.ID);
    });

</script>
